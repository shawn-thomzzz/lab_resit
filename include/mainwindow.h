#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include <vtkRenderer.h>
#include <vtkGenericOpenGLRenderWindow.h>

#define USE_GUI_RENDERER

#include "ModelPartList.h"
#include "VRRenderThread.h"
#include "vtkwidget.h"

// Namespace for UI elements generated by Qt Designer
QT_BEGIN_NAMESPACE
namespace Ui { class MainWindow; }
QT_END_NAMESPACE

/**
 * @class MainWindow
 * @brief The MainWindow class is the main application window that manages the
 *        rendering of 3D models, the tree view of model parts, and interactions
 *        with VR components.
 */
class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    /**
     * @brief Constructor for MainWindow
     * @param parent Parent widget, defaults to nullptr
     */
    MainWindow(QWidget *parent = nullptr);

    /**
     * @brief Destructor for MainWindow
     */
    ~MainWindow();

    /**
     * @brief Updates the 3D render view based on the selected item in the tree view.
     * @param index The index of the selected item in the tree view.
     */
    void updateRenderFromTree(const QModelIndex& index);

    /**
     * @brief Updates the entire 3D render view by rendering all model parts.
     */
    void updateRender();

    /**
     * @brief Adds all actors from the ModelPartList to the VR environment.
     */
    void addActorsToVR();

    /**
     * @brief Recursively adds actors to the VR environment starting from the given index.
     * @param index The starting index in the ModelPartList.
     */
    void addActorsToVR_recursive(const QModelIndex& index);

private:
    Ui::MainWindow *ui;                  /**< Pointer to the UI elements generated by Qt Designer */
    ModelPartList* partList;              /**< Pointer to the ModelPartList, which manages the parts of the model */
    VTKWidget *vtkWidget;                 /**< Pointer to the VTK widget used for rendering the 3D model */

    // Optional VTK components for rendering and VR
    //vtkSmartPointer<vtkRenderer> renderer; /**< Smart pointer to the VTK renderer */
    //vtkSmartPointer<vtkGenericOpenGLRenderWindow> renderWindow; /**< Smart pointer to the VTK OpenGL render window */
    //VRRenderThread* renderThread;         /**< Pointer to the VR render thread */

private slots:
    /**
     * @brief Slot to edit the selected item in the tree view.
     */
    void editSelectedItem();

    /**
     * @brief Slot to add a new item to the tree view and the model.
     */
    void addNewItem();

    /**
     * @brief Slot to open a directory and load STL files from it.
     */
    void openDirectory();
};

#endif // MAINWINDOW_H
